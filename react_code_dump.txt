

# === Nombre : next-env.d.ts
# === Ruta   : next-env.d.ts
# ==============================================

/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


# === Nombre : next.config.ts
# === Ruta   : next.config.ts
# ==============================================

import type {NextConfig} from 'next';

const nextConfig: NextConfig = {
  /* config options here */
  typescript: {
    ignoreBuildErrors: true,
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'placehold.co',
        port: '',
        pathname: '/**',
      },
    ],
  },
};

export default nextConfig;


# === Nombre : tailwind.config.ts
# === Ruta   : tailwind.config.ts
# ==============================================

import type {Config} from 'tailwindcss';

export default {
  darkMode: ['class'],
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      fontFamily: {
        sans: ['var(--font-inter)', 'sans-serif'],
      },
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))',
        },
        sidebar: {
          DEFAULT: 'hsl(var(--sidebar-background))',
          foreground: 'hsl(var(--sidebar-foreground))',
          primary: 'hsl(var(--sidebar-primary))',
          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
          accent: 'hsl(var(--sidebar-accent))',
          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
          border: 'hsl(var(--sidebar-border))',
          ring: 'hsl(var(--sidebar-ring))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'accordion-down': {
          from: {
            height: '0',
          },
          to: {
            height: 'var(--radix-accordion-content-height)',
          },
        },
        'accordion-up': {
          from: {
            height: 'var(--radix-accordion-content-height)',
          },
          to: {
            height: '0',
          },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
    },
  },
  plugins: [require('tailwindcss-animate')],
} satisfies Config;


# === Nombre : dev.ts
# === Ruta   : src\ai\dev.ts
# ==============================================

import { config } from 'dotenv';
config();

import '@/ai/flows/fermentia-chat-flow.ts';


# === Nombre : genkit.ts
# === Ruta   : src\ai\genkit.ts
# ==============================================

import {genkit} from 'genkit';
import {googleAI} from '@genkit-ai/googleai';

// Verificar que la API key esté configurada
if (!process.env.GOOGLE_GENAI_API_KEY) {
  console.error('GOOGLE_GENAI_API_KEY no está configurada en las variables de entorno');
}

export const ai = genkit({
  plugins: [googleAI()],
  model: 'googleai/gemini-2.0-flash',
});


# === Nombre : fermentia-chat-flow.ts
# === Ruta   : src\ai\flows\fermentia-chat-flow.ts
# ==============================================

'use server';
/**
 * @fileOverview Fermentia, un experto en IA en viticultura con capacidades de predicción de cosecha.
 *
 * - chatWithFermentia - Una función para chatear con Fermentia.
 * - FermentiaChatInput - El tipo de entrada para la función de chat.
 * - FermentiaChatOutput - El tipo de retorno para la función de chat.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import { getVineyardData, getHarvestPrediction, getAllHarvestPredictions, getPlotsByVineyardId, getVineyards } from '@/lib/data';

const MessageSchema = z.object({
  role: z.enum(['user', 'assistant', 'tool']),
  content: z.string(),
});

const FermentiaChatInputSchema = z.object({
  history: z.array(MessageSchema),
  message: z.string(),
});
export type FermentiaChatInput = z.infer<typeof FermentiaChatInputSchema>;

const FermentiaChatOutputSchema = z.object({
  text: z.string().describe("La respuesta del asistente de IA."),
});
export type FermentiaChatOutput = z.infer<typeof FermentiaChatOutputSchema>;


const vineyardInfoTool = ai.defineTool(
  {
    name: 'getVineyardInfo',
    description: 'Obtener información sobre los viñedos, incluidas alertas de plagas, variedades de uva y otros datos de IoT.',
    inputSchema: z.object({
      vineyardName: z.string().optional().describe('El nombre de un viñedo específico para obtener información.'),
    }),
    outputSchema: z.any(),
  },
  async (input) => {
    return getVineyardData(input?.vineyardName);
  }
);

const harvestPredictionTool = ai.defineTool(
  {
    name: 'getHarvestPredictions',
    description: 'Obtener predicciones de cosecha incluyendo °Brix, rendimiento y recomendaciones para un viñedo específico o todos los viñedos.',
    inputSchema: z.object({
      vineyardName: z.string().optional().describe('El nombre de un viñedo específico. Si no se proporciona, devuelve predicciones para todos.'),
    }),
    outputSchema: z.any(),
  },
  async (input) => {
    if (input?.vineyardName) {
      // Usar getVineyards() para obtener los objetos completos del viñedo
      const vineyards = getVineyards();
      const vineyard = vineyards.find(v => v.name.toLowerCase().includes(input.vineyardName!.toLowerCase()));
      
      if (!vineyard) {
        return { error: "Viñedo no encontrado para predicciones" };
      }
      
      // Usar el ID directamente del objeto del viñedo
      const prediction = getHarvestPrediction(vineyard.id);
      return {
        viñedo: vineyard.name,
        prediccion: prediction
      };
    } else {
      // Devolver todas las predicciones
      const allPredictions = getAllHarvestPredictions();
      const vineyardData = getVineyards();
      
      if (!Array.isArray(vineyardData)) {
        return { error: "Error al obtener datos de viñedos" };
      }
      
      return vineyardData.map((v) => ({
        nombre: v.name,
        ubicacion: v.location,
        prediccion_brix: allPredictions[v.id]?.brix_next_7d,
        prediccion_rendimiento: allPredictions[v.id]?.yield_final,
        recomendacion: allPredictions[v.id]?.harvest_recommendation,
        confianza_brix: allPredictions[v.id]?.confidence_brix,
        confianza_rendimiento: allPredictions[v.id]?.confidence_yield
      }));
    }
  }
);

const plotDetailsTool = ai.defineTool(
  {
    name: 'getPlotDetails',
    description: 'Obtener detalles específicos de las parcelas de un viñedo, incluyendo métricas individuales de °Brix, rendimiento y condiciones de cada parcela.',
    inputSchema: z.object({
      vineyardName: z.string().describe('El nombre del viñedo para obtener detalles de sus parcelas.'),
    }),
    outputSchema: z.any(),
  },
  async (input) => {
    if (!input.vineyardName) {
      return { error: "Nombre de viñedo requerido" };
    }
    
    // Buscar el viñedo por nombre
    const vineyards = getVineyards();
    const vineyard = vineyards.find(v => v.name.toLowerCase().includes(input.vineyardName.toLowerCase()));
    
    if (!vineyard) {
      return { error: "Viñedo no encontrado" };
    }
    
    // Obtener todas las parcelas
    const plots = getPlotsByVineyardId(vineyard.id);
    
    return {
      viñedo: vineyard.name,
      ubicacion: vineyard.location,
      total_parcelas: vineyard.totalPlots,
      parcelas: plots.map(plot => ({
        numero: plot.plotNumber,
        area_ha: plot.area_ha,
        tipo_suelo: plot.soilType,
        edad_vides: plot.vineAge,
        exposicion: plot.exposure,
        prediccion_brix: plot.prediction.brix_next_7d,
        rendimiento_esperado: plot.prediction.yield_final,
        calidad_score: plot.prediction.quality_score,
        recomendacion_cosecha: plot.prediction.harvest_recommendation,
        fecha_cosecha_estimada: plot.prediction.expected_harvest_date,
        ph_suelo: plot.iotData.soil_ph.toFixed(1),
        materia_organica: plot.iotData.organic_matter.toFixed(1),
        indice_estres_hidrico: plot.iotData.water_stress_index.toFixed(2)
      }))
    };
  }
);

// Función de chat simple y no transmitida por streaming
export async function chatWithFermentia(history: z.infer<typeof MessageSchema>[], message: string): Promise<FermentiaChatOutput> {
  return fermentiaChatFlow({ history, message });
}

const fermentiaChatFlow = ai.defineFlow(
  {
    name: 'fermentiaChatFlow',
    inputSchema: FermentiaChatInputSchema,
    outputSchema: FermentiaChatOutputSchema,
  },
  async (input) => {
    // Construir el prompt manualmente
    let conversationContext = '';
    for (const msg of input.history) {
      conversationContext += `${msg.role}: ${msg.content}\n`;
    }
    conversationContext += `user: ${input.message}\n`;

    const response = await ai.generate({
      model: 'googleai/gemini-2.0-flash',
      tools: [vineyardInfoTool, harvestPredictionTool, plotDetailsTool],
      system: `Eres Fermentia, un asistente experto en IA especializado en viticultura (cultivo de viñedos) y predicción de cosechas. Tu función es proporcionar consejos expertos, responder preguntas y ofrecer sugerencias relacionadas con el cultivo de uvas, la gestión de viñedos y las predicciones de cosecha.

Habla siempre en español.

Tienes acceso a:
1. Datos en tiempo real de los viñedos del usuario (getVineyardInfo)
2. Predicciones de cosecha basadas en algoritmos de Machine Learning:
   - Modelo Random Forest para predicción de °Brix a 7 días
   - Modelo XGBoost para predicción de rendimiento final (kg/ha)
   - Recomendaciones de cosecha basadas en las predicciones
3. Detalles específicos de parcelas individuales (getPlotDetails):
   - Métricas individuales por parcela (°Brix, rendimiento, calidad)
   - Características del suelo (pH, materia orgánica, tipo)
   - Condiciones específicas (edad de vides, exposición)
   - Índices de estrés hídrico por parcela

Cuando te pregunten sobre predicciones de cosecha, utiliza la herramienta getHarvestPredictions. 
Cuando necesites información detallada sobre parcelas específicas, usa getPlotDetails.
Cuando te pregunten sobre un viñedo en general, usa getVineyardInfo.
Las herramientas pueden proporcionar:
- °Brix previsto a 7 días
- Rendimiento esperado en kg/ha
- Nivel de confianza de las predicciones
- Recomendaciones de cosecha (optimal, harvest_soon, wait)
- Detalles individuales de cada parcela
- Análisis comparativo entre parcelas

Explica los resultados de manera clara y proporciona contexto sobre lo que significan los valores de °Brix y rendimiento para la calidad del vino y la planificación de la cosecha. Cuando hables de parcelas específicas, menciona las diferencias entre ellas y qué factores pueden estar influyendo en sus métricas.

Sé amable, conocedor y servicial. Si no tienes información específica, utiliza las herramientas disponibles para obtener los datos más actualizados.`,
      prompt: conversationContext,
    });

    return { text: response.text };
  }
);

# === Nombre : actions.ts
# === Ruta   : src\app\actions.ts
# ==============================================

// src/app/actions.ts

"use server";

import { z } from "zod";
import { chatWithFermentia as chatWithFermentiaFlow } from "@/ai/flows/fermentia-chat-flow";
import { addVineyard as addVineyardDB } from "@/lib/data";
import type { Message } from "@/types";
import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";

const chatSchema = z.object({
  history: z.array(z.object({
    role: z.enum(['user', 'assistant', 'tool']),
    content: z.string(),
  })),
  message: z.string(),
});

export async function chatWithFermentia(history: Message[], message: string) {
  const validatedInput = chatSchema.parse({ history, message });
  try {
    // Verificar que la API key esté configurada
    if (!process.env.GOOGLE_GENAI_API_KEY) {
      console.error("GOOGLE_GENAI_API_KEY no está configurada");
      throw new Error("API key no configurada");
    }
    
    console.log("Llamando a Fermentia con mensaje:", message);
    const output = await chatWithFermentiaFlow(validatedInput.history, validatedInput.message);
    console.log("Respuesta de Fermentia:", output);
    return { text: output.text };
  } catch (error) {
    console.error("Error detallado al chatear con Fermentia:", error);
    console.error("Stack trace:", error instanceof Error ? error.stack : 'No stack available');
    
    // Proporcionar un error más específico
    if (error instanceof Error) {
      if (error.message.includes('API key')) {
        throw new Error("Error de configuración: API key no válida o no configurada");
      }
      if (error.message.includes('quota') || error.message.includes('limit')) {
        throw new Error("Error: Se ha excedido la cuota de la API");
      }
      if (error.message.includes('network') || error.message.includes('fetch')) {
        throw new Error("Error de conexión: No se puede conectar con la API");
      }
    }
    
    throw new Error(`Error al conectar con Fermentia: ${error instanceof Error ? error.message : 'Error desconocido'}`);
  }
}

const vineyardSchema = z.object({
    name: z.string().min(3, "El nombre debe tener al menos 3 caracteres."),
    location: z.string().min(3, "La ubicación debe tener al menos 3 caracteres."),
    grapeVarietals: z.string().min(3, "Las variedades de uva deben tener al menos 3 caracteres."),
    totalPlots: z.coerce.number().int().positive("El número de parcelas debe ser positivo."),
    imageUrl: z.string().url("La URL de la imagen no es válida."),
    imageHint: z.string().optional(),
});

export async function addVineyard(prevState: any, formData: FormData) {
    const validatedFields = vineyardSchema.safeParse({
        name: formData.get('name'),
        location: formData.get('location'),
        grapeVarietals: formData.get('grapeVarietals'),
        totalPlots: formData.get('totalPlots'),
        imageUrl: formData.get('imageUrl'),
        imageHint: formData.get('imageHint'),
    });

    if (!validatedFields.success) {
        return {
            errors: validatedFields.error.flatten().fieldErrors,
            message: 'Error de validación. Por favor, corrige los campos.',
        };
    }

    try {
        const vineyard = {
            ...validatedFields.data,
            imageHint: validatedFields.data.imageHint || '',
        };
        addVineyardDB(vineyard);
    } catch (error) {
        return {
            message: 'Error en la base de datos: No se pudo crear el viñedo.',
        };
    }

    revalidatePath('/vineyards');
    revalidatePath('/');
    redirect('/vineyards');
}

# === Nombre : globals.css
# === Ruta   : src\app\globals.css
# ==============================================

@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer base {
  :root {
    --background: 224 71% 4%;
    --foreground: 210 40% 98%;
    --card: 224 71% 6%;
    --card-foreground: 210 40% 98%;
    --popover: 224 71% 4%;
    --popover-foreground: 210 40% 98%;
    --primary: 340 65% 45%;
    --primary-foreground: 210 40% 98%;
    --secondary: 217 33% 17%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217 33% 17%;
    --muted-foreground: 215 20% 65%;
    --accent: 340 65% 45%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 63% 31%;
    --destructive-foreground: 210 40% 98%;
    --border: 217 33% 17%;
    --input: 217 33% 17%;
    --ring: 340 65% 45%;
    --radius: 0.5rem;
    --sidebar-background: 224 71% 4%;
    --sidebar-foreground: 210 40% 98%;
    --sidebar-primary: 340 65% 45%;
    --sidebar-primary-foreground: 210 40% 98%;
    --sidebar-accent: 217 33% 17%;
    --sidebar-accent-foreground: 210 40% 98%;
    --sidebar-border: 217 33% 17%;
    --sidebar-ring: 340 65% 45%;
  }

  .dark {
    --background: 224 71% 4%;
    --foreground: 210 40% 98%;
    --card: 224 71% 6%;
    --card-foreground: 210 40% 98%;
    --popover: 224 71% 4%;
    --popover-foreground: 210 40% 98%;
    --primary: 340 65% 45%;
    --primary-foreground: 210 40% 98%;
    --secondary: 217 33% 17%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217 33% 17%;
    --muted-foreground: 215 20% 65%;
    --accent: 340 65% 45%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 63% 31%;
    --destructive-foreground: 210 40% 98%;
    --border: 217 33% 17%;
    --input: 217 33% 17%;
    --ring: 340 65% 45%;
    --radius: 0.5rem;
    --sidebar-background: 224 71% 4%;
    --sidebar-foreground: 210 40% 98%;
    --sidebar-primary: 340 65% 45%;
    --sidebar-primary-foreground: 210 40% 98%;
    --sidebar-accent: 217 33% 17%;
    --sidebar-accent-foreground: 210 40% 98%;
    --sidebar-border: 217 33% 17%;
    --sidebar-ring: 340 65% 45%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


# === Nombre : layout.tsx
# === Ruta   : src\app\layout.tsx
# ==============================================

import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { Toaster } from "@/components/ui/toaster";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Vineyard AI - Panel de Control",
  description: "Monitorea la salud y el estado de tus viñedos en tiempo real.",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="es" className="dark" suppressHydrationWarning>
      <body className={`${inter.className} antialiased`}>
        {children}
        <Toaster />
      </body>
    </html>
  );
}


# === Nombre : page.tsx
# === Ruta   : src\app\page.tsx
# ==============================================

// src/app/page.tsx

"use client";

import { useState, useEffect } from "react";
import Image from 'next/image';
import Link from 'next/link';
import {
  Avatar,
  AvatarFallback,
} from "@/components/ui/avatar";
import {
  Bot,
  CircleUser,
  Search,
  Wine,
  Send,
  LoaderCircle,
  AlertTriangle,
  PlusCircle,
  TrendingUp,
  Grape,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import type { Vineyard, Message, HarvestPrediction } from "@/types";
import { chatWithFermentia } from "@/app/actions";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { getVineyards, getHarvestPrediction } from "@/lib/data";

const VineyardCard: React.FC<{ vineyard: Vineyard; prediction: HarvestPrediction | null }> = ({ vineyard, prediction }) => (
  <Link href={`/vineyards/${vineyard.id}`}>
    <Card className="bg-card border-border/50 overflow-hidden hover:border-primary/50 transition-colors duration-300 cursor-pointer">
      <CardContent className="p-0">
        <div className="flex flex-col">
          {/* Imagen y datos básicos */}
          <div className="flex items-stretch">
            <div className="flex-shrink-0 w-[150px] md:w-[200px]">
              <Image src={vineyard.imageUrl} alt={vineyard.name} data-ai-hint={vineyard.imageHint} width={200} height={150} className="w-full h-full object-cover" />
            </div>
            <div className="p-4 flex-1 flex flex-col justify-center">
              <h3 className="font-bold text-lg">{vineyard.name}</h3>
              <p className="text-sm text-muted-foreground mb-2">
                {vineyard.location}
              </p>
              <p className="text-sm text-muted-foreground">
                Parcelas: {vineyard.totalPlots} | Uvas: {vineyard.grapeVarietals}
              </p>
              {vineyard.iotData.pests && (
                <Badge variant="destructive" className="mt-2 w-fit">
                  <AlertTriangle className="mr-1 h-3 w-3" />
                  Alerta de Plaga
                </Badge>
              )}
            </div>
          </div>
          
          {/* Predicciones de cosecha */}
          {prediction && (
            <div className="p-4 bg-muted/20 border-t">
              <div className="flex items-center gap-2 mb-3">
                <Grape className="h-4 w-4 text-primary" />
                <span className="text-sm font-medium">Predicciones de Cosecha</span>
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-1">
                  <div className="flex items-center justify-between">
                    <span className="text-xs text-muted-foreground">°Brix (7 días)</span>
                    <span className="text-sm font-semibold">{prediction.brix_next_7d}°</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-xs text-muted-foreground">Confianza</span>
                    <span className="text-xs">{(prediction.confidence_brix * 100).toFixed(0)}%</span>
                  </div>
                </div>
                
                <div className="space-y-1">
                  <div className="flex items-center justify-between">
                    <span className="text-xs text-muted-foreground">Rendimiento</span>
                    <span className="text-sm font-semibold">{prediction.yield_final.toLocaleString()} kg/ha</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-xs text-muted-foreground">Confianza</span>
                    <span className="text-xs">{(prediction.confidence_yield * 100).toFixed(0)}%</span>
                  </div>
                </div>
              </div>
              
              <div className="mt-3 flex justify-center">
                <Badge 
                  variant={
                    prediction.harvest_recommendation === 'optimal' ? 'default' :
                    prediction.harvest_recommendation === 'harvest_soon' ? 'secondary' : 'outline'
                  }
                  className="text-xs"
                >
                  <TrendingUp className="mr-1 h-3 w-3" />
                  {prediction.harvest_recommendation === 'optimal' ? 'Cosecha Óptima' :
                   prediction.harvest_recommendation === 'harvest_soon' ? 'Cosechar Pronto' : 'Esperar'}
                </Badge>
              </div>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  </Link>
);

const ChatPanel: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;

    const userMessage: Message = { id: Date.now().toString(), role: 'user', content: input };
    const newMessages = [...messages, userMessage];
    
    setMessages(newMessages);
    setInput("");
    setIsLoading(true);

    try {
      const chatHistory = newMessages;
      const response = await chatWithFermentia(chatHistory, userMessage.content);
      const assistantMessage: Message = { id: (Date.now() + 1).toString(), role: 'assistant', content: response.text };
      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
       console.error(error);
       const errorMessage: Message = { id: (Date.now() + 1).toString(), role: 'assistant', content: "Lo siento, tengo problemas para conectarme. Por favor, inténtalo de nuevo más tarde." };
       setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
     <Sheet>
        <SheetTrigger asChild>
          <Button>
            <Bot className="h-5 w-5" />
            <span>Habla con Fermentia</span>
          </Button>
        </SheetTrigger>
        <SheetContent className="w-[400px] sm:w-[540px] bg-background p-0">
          <SheetHeader className="p-6 border-b border-border">
            <SheetTitle className="flex items-center gap-2">
              <Bot className="h-6 w-6 text-primary"/>
              <span>Fermentia, tu experto en viñedos</span>
            </SheetTitle>
          </SheetHeader>
          <div className="flex flex-col h-[calc(100%-76px)]">
            <ScrollArea className="flex-1 p-6">
              <div className="space-y-4">
                 {messages.length === 0 && (
                  <div className="text-center text-muted-foreground py-8 px-4 rounded-lg bg-muted/50">
                    <Wine className="mx-auto h-10 w-10 mb-4 text-primary" />
                    <h3 className="font-semibold text-lg text-foreground mb-2">¡Bienvenido a Fermentia!</h3>
                    <p className="text-sm">¡Pregúntame sobre sensores IoT, predicciones y alertas de tus viñedos!</p>
                    <p className="text-xs mt-2">ej: "¿Hay alertas críticas?" • "Sensores de Finca Roble Alto" • "¿Qué parcelas tienen pH alto?"</p>
                  </div>
                )}
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex items-start gap-3 ${
                      message.role === "user" ? "justify-end" : ""
                    }`}
                  >
                    {message.role === "assistant" && (
                      <Avatar className="h-8 w-8 border-2 border-primary">
                        <AvatarFallback className="bg-primary text-primary-foreground">
                          <Bot />
                        </AvatarFallback>
                      </Avatar>
                    )}
                    <div
                      className={`max-w-[75%] rounded-lg p-3 text-sm ${
                        message.role === "user"
                          ? "bg-primary text-primary-foreground"
                          : "bg-muted"
                      }`}
                    >
                      {message.content}
                    </div>
                     {message.role === "user" && (
                       <Avatar className="h-8 w-8">
                        <AvatarFallback>
                          <CircleUser />
                        </AvatarFallback>
                      </Avatar>
                    )}
                  </div>
                ))}
                {isLoading && (
                  <div className="flex items-start gap-3">
                     <Avatar className="h-8 w-8 border-2 border-primary">
                        <AvatarFallback className="bg-primary text-primary-foreground">
                          <Bot />
                        </AvatarFallback>
                      </Avatar>
                     <div className="bg-muted rounded-lg p-3 flex items-center">
                        <LoaderCircle className="h-4 w-4 animate-spin text-primary" />
                     </div>
                  </div>
                )}
              </div>
            </ScrollArea>
            <div className="p-4 border-t border-border bg-background">
              <form onSubmit={handleSendMessage} className="relative">
                <Input
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  placeholder="Pregúntale a Fermentia..."
                  className="pr-12 bg-muted focus:bg-background"
                  disabled={isLoading}
                />
                <Button
                  type="submit"
                  size="icon"
                  className="absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8"
                  disabled={isLoading || !input.trim()}
                >
                  <Send className="h-4 w-4" />
                </Button>
              </form>
            </div>
          </div>
        </SheetContent>
      </Sheet>
  )
}

const Header: React.FC = () => (
    <header className="sticky top-0 z-30 flex h-16 items-center gap-4 border-b bg-background px-4 md:px-6">
        <nav className="hidden flex-col gap-6 text-lg font-medium md:flex md:flex-row md:items-center md:gap-5 md:text-sm lg:gap-6">
            <Link href="/" className="flex items-center gap-2 text-lg font-semibold md:text-base">
                <Wine className="h-6 w-6 text-primary" />
                <span className="sr-only">Vineyard AI</span>
            </Link>
            <Link href="/" className="text-foreground transition-colors hover:text-foreground">
                Resumen
            </Link>
            <Link href="/vineyards" className="text-muted-foreground transition-colors hover:text-foreground">
                Gestionar Viñedos
            </Link>
        </nav>
        <div className="flex w-full items-center gap-4 md:ml-auto md:gap-2 lg:gap-4">
            <form className="ml-auto flex-1 sm:flex-initial">
                <div className="relative">
                    <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                    <Input
                        type="search"
                        placeholder="Buscar..."
                        className="pl-8 sm:w-[300px] md:w-[200px] lg:w-[300px]"
                    />
                </div>
            </form>
            <DropdownMenu>
                <DropdownMenuTrigger asChild>
                    <Button variant="secondary" size="icon" className="rounded-full">
                        <CircleUser className="h-5 w-5" />
                        <span className="sr-only">Toggle user menu</span>
                    </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                    <DropdownMenuLabel>Mi Cuenta</DropdownMenuLabel>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem>Ajustes</DropdownMenuItem>
                    <DropdownMenuItem>Soporte</DropdownMenuItem>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem>Cerrar Sesión</DropdownMenuItem>
                </DropdownMenuContent>
            </DropdownMenu>
        </div>
    </header>
);

export default function DashboardPage() {
  const [vineyards] = useState<Vineyard[]>(getVineyards());
  const [predictions, setPredictions] = useState<{ [key: string]: HarvestPrediction | null }>({});
  
  useEffect(() => {
    // Cargar predicciones para todos los viñedos
    const loadPredictions = () => {
      const newPredictions: { [key: string]: HarvestPrediction | null } = {};
      vineyards.forEach(vineyard => {
        newPredictions[vineyard.id] = getHarvestPrediction(vineyard.id);
      });
      setPredictions(newPredictions);
    };
    
    loadPredictions();
  }, [vineyards]);
  
  return (
    <div className="flex min-h-screen w-full flex-col">
        <Header />
        <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
            <div className="flex items-center">
                <h1 className="text-lg font-semibold md:text-2xl">Resumen de Viñedos</h1>
                <div className="ml-auto flex items-center gap-2">
                    <ChatPanel />
                </div>
            </div>
            
            {/* Resumen de predicciones */}
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">°Brix Promedio</CardTitle>
                  <Grape className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">
                    {Object.values(predictions).filter(p => p).length > 0 ? 
                      (Object.values(predictions).reduce((acc, p) => acc + (p?.brix_next_7d || 0), 0) / 
                       Object.values(predictions).filter(p => p).length).toFixed(1) : '0'}°
                  </div>
                  <p className="text-xs text-muted-foreground">Predicción a 7 días</p>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Rendimiento Esperado</CardTitle>
                  <TrendingUp className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">
                    {Object.values(predictions).filter(p => p).length > 0 ? 
                      Math.round(Object.values(predictions).reduce((acc, p) => acc + (p?.yield_final || 0), 0) / 
                       Object.values(predictions).filter(p => p).length).toLocaleString() : '0'} kg/ha
                  </div>
                  <p className="text-xs text-muted-foreground">Promedio estimado</p>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Listos para Cosecha</CardTitle>
                  <AlertTriangle className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">
                    {Object.values(predictions).filter(p => p && p.harvest_recommendation === 'optimal').length}
                  </div>
                  <p className="text-xs text-muted-foreground">De {vineyards.length} viñedos</p>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Alertas Activas</CardTitle>
                  <AlertTriangle className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">
                    {vineyards.filter(v => v.iotData.pests).length}
                  </div>
                  <p className="text-xs text-muted-foreground">Plagas detectadas</p>
                </CardContent>
              </Card>
            </div>
            
            <div className="grid gap-4 md:grid-cols-2 md:gap-8 lg:grid-cols-2 xl:grid-cols-3">
                {vineyards.map((vineyard) => (
                    <VineyardCard 
                      key={vineyard.id} 
                      vineyard={vineyard} 
                      prediction={predictions[vineyard.id]} 
                    />
                ))}
                 <Link href="/vineyards/new">
                    <Card className="flex flex-col items-center justify-center h-full border-2 border-dashed hover:border-primary/80 hover:bg-muted/50 transition-colors duration-300 cursor-pointer">
                        <CardContent className="flex flex-col items-center justify-center p-6">
                            <PlusCircle className="h-12 w-12 text-muted-foreground" />
                            <p className="mt-4 text-center font-semibold">Añadir Nuevo Viñedo</p>
                        </CardContent>
                    </Card>
                </Link>
            </div>

             <div className="space-y-4">
                <h2 className="text-2xl font-semibold">Vista de Mapa</h2>
                <Card className="overflow-hidden">
                  <Image src="https://placehold.co/1200x500.png" data-ai-hint="map" width={1200} height={500} alt="Mapa de viñedos" className="w-full object-cover"/>
                </Card>
              </div>

        </main>
    </div>
  );
}

# === Nombre : layout.tsx
# === Ruta   : src\app\vineyards\layout.tsx
# ==============================================


import Link from 'next/link';
import {
  CircleUser,
  Menu,
  Wine,
  Search,
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Input } from '@/components/ui/input';
import { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';

const Header: React.FC = () => (
    <header className="sticky top-0 z-30 flex h-16 items-center gap-4 border-b bg-background px-4 md:px-6">
        <nav className="hidden flex-col gap-6 text-lg font-medium md:flex md:flex-row md:items-center md:gap-5 md:text-sm lg:gap-6">
            <Link href="/" className="flex items-center gap-2 text-lg font-semibold md:text-base">
                <Wine className="h-6 w-6 text-primary" />
                <span className="sr-only">Vineyard AI</span>
            </Link>
            <Link href="/" className="text-muted-foreground transition-colors hover:text-foreground">
                Resumen
            </Link>
            <Link href="/vineyards" className="text-foreground transition-colors hover:text-foreground">
                Gestionar Viñedos
            </Link>
        </nav>
        {/* Mobile Menu */}
        <Sheet>
            <SheetTrigger asChild>
                <Button variant="outline" size="icon" className="shrink-0 md:hidden">
                    <Menu className="h-5 w-5" />
                    <span className="sr-only">Toggle navigation menu</span>
                </Button>
            </SheetTrigger>
            <SheetContent side="left">
                <nav className="grid gap-6 text-lg font-medium">
                     <Link href="/" className="flex items-center gap-2 text-lg font-semibold">
                        <Wine className="h-6 w-6 text-primary" />
                        <span className="sr-only">Vineyard AI</span>
                    </Link>
                    <Link href="/" className="hover:text-foreground">Resumen</Link>
                    <Link href="/vineyards" className="text-muted-foreground hover:text-foreground">Gestionar Viñedos</Link>
                </nav>
            </SheetContent>
        </Sheet>
        <div className="flex w-full items-center gap-4 md:ml-auto md:gap-2 lg:gap-4">
            <form className="ml-auto flex-1 sm:flex-initial">
                <div className="relative">
                    <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                    <Input
                        type="search"
                        placeholder="Buscar..."
                        className="pl-8 sm:w-[300px] md:w-[200px] lg:w-[300px]"
                    />
                </div>
            </form>
            <DropdownMenu>
                <DropdownMenuTrigger asChild>
                    <Button variant="secondary" size="icon" className="rounded-full">
                        <CircleUser className="h-5 w-5" />
                        <span className="sr-only">Toggle user menu</span>
                    </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                    <DropdownMenuLabel>Mi Cuenta</DropdownMenuLabel>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem>Ajustes</DropdownMenuItem>
                    <DropdownMenuItem>Soporte</DropdownMenuItem>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem>Cerrar Sesión</DropdownMenuItem>
                </DropdownMenuContent>
            </DropdownMenu>
        </div>
    </header>
);

export default function VineyardsLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
     <div className="flex min-h-screen w-full flex-col">
      <Header />
      <main className="flex flex-1 flex-col">{children}</main>
    </div>
  );
}


# === Nombre : page.tsx
# === Ruta   : src\app\vineyards\page.tsx
# ==============================================

// src/app/vineyards/page.tsx

"use client";

import Link from "next/link"
import { PlusCircle, Eye, TrendingUp } from "lucide-react"

import { Button } from "@/components/ui/button"
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { getVineyards, getAllHarvestPredictions } from "@/lib/data"
import { Badge } from "@/components/ui/badge"

export default function VineyardsPage() {
    const vineyards = getVineyards();
    const predictions = getAllHarvestPredictions();

    return (
        <div className="flex min-h-screen w-full flex-col bg-muted/40">
            <div className="flex flex-col sm:gap-4 sm:py-4 sm:pl-14">
                <main className="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
                    <div className="flex items-center">
                        <div className="ml-auto flex items-center gap-2">
                            <Link href="/vineyards/new">
                               <Button size="sm" className="h-8 gap-1">
                                    <PlusCircle className="h-3.5 w-3.5" />
                                    <span className="sr-only sm:not-sr-only sm:whitespace-nowrap">
                                    Añadir Viñedo
                                    </span>
                                </Button>
                            </Link>
                        </div>
                    </div>
                    <Card>
                        <CardHeader>
                            <CardTitle>Viñedos</CardTitle>
                            <CardDescription>
                                Gestiona tus viñedos y mira su estado. Haz clic en "Ver Detalle" para ver las métricas de cada parcela.
                            </CardDescription>
                        </CardHeader>
                        <CardContent>
                            <Table>
                                <TableHeader>
                                    <TableRow>
                                        <TableHead>Nombre</TableHead>
                                        <TableHead>Ubicación</TableHead>
                                        <TableHead>Estado</TableHead>
                                        <TableHead>Variedades</TableHead>
                                        <TableHead>Parcelas</TableHead>
                                        <TableHead>Predicción °Brix</TableHead>
                                        <TableHead>Rendimiento</TableHead>
                                        <TableHead className="text-right">Acciones</TableHead>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    {vineyards.map((vineyard) => {
                                        const prediction = predictions[vineyard.id];
                                        // Calcular promedio de parcelas
                                        const avgBrix = vineyard.plots.reduce((acc, plot) => acc + plot.prediction.brix_next_7d, 0) / vineyard.plots.length;
                                        const avgYield = vineyard.plots.reduce((acc, plot) => acc + plot.prediction.yield_final, 0) / vineyard.plots.length;
                                        const readyPlots = vineyard.plots.filter(plot => plot.prediction.harvest_recommendation === 'optimal').length;
                                        
                                        return (
                                            <TableRow key={vineyard.id}>
                                                <TableCell className="font-medium">
                                                    <Link href={`/vineyards/${vineyard.id}`} className="hover:text-primary">
                                                        {vineyard.name}
                                                    </Link>
                                                </TableCell>
                                                <TableCell>{vineyard.location}</TableCell>
                                                <TableCell>
                                                    {vineyard.iotData.pests ? (
                                                         <Badge variant="destructive">Alerta de Plaga</Badge>
                                                    ) : (
                                                        <Badge variant="secondary">Saludable</Badge>
                                                    )}
                                                </TableCell>
                                                <TableCell>{vineyard.grapeVarietals}</TableCell>
                                                <TableCell>
                                                    <div className="space-y-1">
                                                        <div>{vineyard.totalPlots} parcelas</div>
                                                        <div className="text-xs text-muted-foreground">
                                                            {readyPlots > 0 && (
                                                                <Badge variant="outline" className="text-xs">
                                                                    <TrendingUp className="mr-1 h-3 w-3" />
                                                                    {readyPlots} listas
                                                                </Badge>
                                                            )}
                                                        </div>
                                                    </div>
                                                </TableCell>
                                                <TableCell>
                                                    <div className="space-y-1">
                                                        <div className="font-semibold">{avgBrix.toFixed(1)}°</div>
                                                        <div className="text-xs text-muted-foreground">Promedio</div>
                                                    </div>
                                                </TableCell>
                                                <TableCell>
                                                    <div className="space-y-1">
                                                        <div className="font-semibold">{Math.round(avgYield).toLocaleString()}</div>
                                                        <div className="text-xs text-muted-foreground">kg/ha</div>
                                                    </div>
                                                </TableCell>
                                                <TableCell className="text-right">
                                                    <Link href={`/vineyards/${vineyard.id}`}>
                                                        <Button variant="ghost" size="sm">
                                                            <Eye className="mr-2 h-4 w-4" />
                                                            Ver Detalle
                                                        </Button>
                                                    </Link>
                                                </TableCell>
                                            </TableRow>
                                        );
                                    })}
                                </TableBody>
                            </Table>
                        </CardContent>
                        <CardFooter>
                            <div className="text-xs text-muted-foreground">
                                Mostrando <strong>1-{vineyards.length}</strong> de <strong>{vineyards.length}</strong> viñedos
                            </div>
                        </CardFooter>
                    </Card>
                </main>
            </div>
        </div>
    )
}

# === Nombre : page.tsx
# === Ruta   : src\app\vineyards\new\page.tsx
# ==============================================


'use client';

import Link from 'next/link';
import { useFormState, useFormStatus } from 'react-dom';
import { ArrowLeft } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { addVineyard } from '@/app/actions';

function SubmitButton() {
  const { pending } = useFormStatus();
  return (
    <Button type="submit" disabled={pending} aria-disabled={pending}>
      {pending ? 'Guardando...' : 'Guardar Viñedo'}
    </Button>
  );
}

export default function NewVineyardPage() {
  const initialState = { message: null, errors: {} };
  const [state, dispatch] = useFormState(addVineyard, initialState);

  return (
    <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
      <form action={dispatch}>
        <div className="mx-auto grid max-w-6xl flex-1 auto-rows-max gap-4">
            <div className="flex items-center gap-4">
                 <Link href="/vineyards">
                    <Button variant="outline" size="icon" className="h-7 w-7">
                        <ArrowLeft className="h-4 w-4" />
                        <span className="sr-only">Atrás</span>
                    </Button>
                </Link>
                <h1 className="flex-1 shrink-0 whitespace-nowrap text-xl font-semibold tracking-tight sm:grow-0">
                    Añadir Nuevo Viñedo
                </h1>
                <div className="hidden items-center gap-2 md:ml-auto md:flex">
                     <Link href="/vineyards">
                        <Button variant="outline">Cancelar</Button>
                    </Link>
                    <SubmitButton />
                </div>
            </div>
            <div className="grid gap-4 md:grid-cols-[1fr_250px] lg:grid-cols-3 lg:gap-8">
                <div className="grid auto-rows-max items-start gap-4 lg:col-span-2 lg:gap-8">
                    <Card>
                        <CardHeader>
                            <CardTitle>Detalles del Viñedo</CardTitle>
                            <CardDescription>
                                Introduce la información principal de tu nuevo viñedo.
                            </CardDescription>
                        </CardHeader>
                        <CardContent>
                            <div className="grid gap-6">
                                <div className="grid gap-3">
                                    <Label htmlFor="name">Nombre</Label>
                                    <Input
                                        id="name"
                                        name="name"
                                        type="text"
                                        className="w-full"
                                        placeholder="Ej: Finca Roble Alto"
                                        required
                                    />
                                    {state.errors?.name && <p className="text-sm text-destructive">{state.errors.name}</p>}
                                </div>
                                <div className="grid gap-3">
                                    <Label htmlFor="location">Ubicación</Label>
                                    <Input
                                        id="location"
                                        name="location"
                                        placeholder="Ej: Valle de Napa, California"
                                        required
                                    />
                                     {state.errors?.location && <p className="text-sm text-destructive">{state.errors.location}</p>}
                                </div>
                                <div className="grid gap-3">
                                    <Label htmlFor="grapeVarietals">Variedades de Uva</Label>
                                    <Input
                                        id="grapeVarietals"
                                        name="grapeVarietals"
                                        placeholder="Ej: Cabernet Sauvignon, Merlot"
                                        required
                                    />
                                     {state.errors?.grapeVarietals && <p className="text-sm text-destructive">{state.errors.grapeVarietals}</p>}
                                </div>
                                <div className="grid gap-3">
                                    <Label htmlFor="totalPlots">Total de Parcelas</Label>
                                    <Input
                                        id="totalPlots"
                                        name="totalPlots"
                                        type="number"
                                        placeholder="Ej: 12"
                                        required
                                    />
                                     {state.errors?.totalPlots && <p className="text-sm text-destructive">{state.errors.totalPlots}</p>}
                                </div>
                            </div>
                        </CardContent>
                    </Card>
                     <Card>
                        <CardHeader>
                            <CardTitle>Imagen del Viñedo</CardTitle>
                            <CardDescription>
                                Añade una imagen representativa para tu viñedo.
                            </CardDescription>
                        </CardHeader>
                        <CardContent>
                            <div className="grid gap-3">
                                <Label htmlFor="imageUrl">URL de la Imagen</Label>
                                <Input
                                    id="imageUrl"
                                    name="imageUrl"
                                    type="url"
                                    placeholder="https://placehold.co/400x300.png"
                                    defaultValue="https://placehold.co/400x300.png"
                                    required
                                />
                                {state.errors?.imageUrl && <p className="text-sm text-destructive">{state.errors.imageUrl}</p>}
                            </div>
                            <div className="grid gap-3 mt-4">
                                <Label htmlFor="imageHint">Pista para IA (Opcional)</Label>
                                <Input
                                    id="imageHint"
                                    name="imageHint"
                                    placeholder="Ej: vineyard sunset"
                                />
                            </div>
                        </CardContent>
                    </Card>
                </div>
            </div>
            <div className="flex items-center justify-center gap-2 md:hidden">
                 <Link href="/vineyards">
                    <Button variant="outline">Cancelar</Button>
                </Link>
                <SubmitButton />
            </div>
        </div>
      </form>
    </main>
  );
}


# === Nombre : layout.tsx
# === Ruta   : src\app\vineyards\[id]\layout.tsx
# ==============================================

// src/app/vineyards/[id]/layout.tsx

export default function VineyardDetailLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className="flex min-h-screen w-full flex-col">
      {children}
    </div>
  );
}

# === Nombre : page.tsx
# === Ruta   : src\app\vineyards\[id]\page.tsx
# ==============================================

// src/app/vineyards/[id]/page.tsx

"use client";

import { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import Link from "next/link";
import Image from "next/image";
import {
  ArrowLeft,
  MapPin,
  Calendar,
  Grape,
  TrendingUp,
  AlertTriangle,
  Eye,
  Droplets,
  Thermometer,
  Leaf,
  Zap,
  Sun,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import type { Vineyard, Plot } from "@/types";
import { getVineyardById, getPlotsByVineyardId } from "@/lib/data";

// Componente para mostrar tendencias con flechitas
const TrendIndicator: React.FC<{ trend: string; value: string }> = ({ trend, value }) => {
  const getTrendConfig = (trend: string) => {
    switch (trend) {
      case 'up_good':
        return { icon: '↗️', color: 'text-green-600', bg: 'bg-green-50' };
      case 'up_bad':
        return { icon: '↗️', color: 'text-red-600', bg: 'bg-red-50' };
      case 'down_good':
        return { icon: '↘️', color: 'text-green-600', bg: 'bg-green-50' };
      case 'down_bad':
        return { icon: '↘️', color: 'text-red-600', bg: 'bg-red-50' };
      case 'stable_good':
        return { icon: '➡️', color: 'text-green-600', bg: 'bg-green-50' };
      case 'stable_bad':
        return { icon: '➡️', color: 'text-yellow-600', bg: 'bg-yellow-50' };
      default:
        return { icon: '➡️', color: 'text-gray-600', bg: 'bg-gray-50' };
    }
  };

  const config = getTrendConfig(trend);

  return (
    <div className={`inline-flex items-center gap-1 px-2 py-1 rounded-md ${config.bg}`}>
      <span className="text-sm">{config.icon}</span>
      <span className={`text-xs font-medium ${config.color}`}>{value}</span>
    </div>
  );
};

// Componente para mostrar alertas
const AlertBadge: React.FC<{ alert: Plot['alerts'] }> = ({ alert }) => {
  const getAlertConfig = (priority: string) => {
    switch (priority) {
      case 'critical':
        return { variant: "destructive" as const, icon: '🚨', text: alert.action_required };
      case 'high':
        return { variant: "destructive" as const, icon: '⚠️', text: alert.action_required };
      case 'medium':
        return { variant: "secondary" as const, icon: '⚡', text: alert.action_required };
      case 'low':
        return { variant: "outline" as const, icon: '📋', text: alert.action_required };
      default:
        return { variant: "outline" as const, icon: '✅', text: 'Todo bien' };
    }
  };

  const config = getAlertConfig(alert.priority);

  return (
    <div className="space-y-1">
      <Badge variant={config.variant} className="text-xs">
        {config.icon} {config.text}
      </Badge>
      <div className="text-xs text-muted-foreground">
        {alert.time_frame}
      </div>
    </div>
  );
};

const MetricCard: React.FC<{
  title: string;
  value: string | number;
  icon: React.ReactNode;
  description?: string;
}> = ({ title, value, icon, description }) => (
  <Card>
    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
      <CardTitle className="text-sm font-medium">{title}</CardTitle>
      {icon}
    </CardHeader>
    <CardContent>
      <div className="text-2xl font-bold">{value}</div>
      {description && <p className="text-xs text-muted-foreground">{description}</p>}
    </CardContent>
  </Card>
);

export default function VineyardDetailPage() {
  const params = useParams();
  const vineyardId = params?.id as string;
  const [vineyard, setVineyard] = useState<Vineyard | null>(null);
  const [plots, setPlots] = useState<Plot[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (vineyardId) {
      const vineyardData = getVineyardById(vineyardId);
      const plotsData = getPlotsByVineyardId(vineyardId);
      
      setVineyard(vineyardData || null);
      setPlots(plotsData);
      setLoading(false);
    }
  }, [vineyardId]);

  if (loading) {
    return <div className="p-8">Cargando...</div>;
  }

  if (!vineyard) {
    return (
      <div className="flex min-h-screen flex-col items-center justify-center">
        <h1 className="text-2xl font-bold mb-4">Viñedo no encontrado</h1>
        <Link href="/vineyards">
          <Button>Volver a Viñedos</Button>
        </Link>
      </div>
    );
  }

  // Calcular estadísticas del viñedo
  const avgBrix = plots.reduce((acc, plot) => acc + plot.prediction.brix_next_7d, 0) / plots.length;
  const avgMoisture = plots.reduce((acc, plot) => acc + plot.prediction.soil_moisture_next_7d, 0) / plots.length;
  const avgQuality = plots.reduce((acc, plot) => acc + plot.prediction.quality_score, 0) / plots.length;
  const readyToHarvest = plots.filter(plot => plot.prediction.harvest_recommendation === 'optimal').length;
  const criticalAlerts = plots.filter(plot => plot.alerts.priority === 'critical').length;
  const totalArea = plots.reduce((acc, plot) => acc + plot.area_ha, 0);

  return (
    <div className="flex min-h-screen w-full flex-col bg-background">
      {/* Header */}
      <header className="sticky top-0 z-30 flex h-16 items-center gap-4 border-b bg-background px-4 md:px-6">
        <Link href="/vineyards">
          <Button variant="outline" size="icon" className="h-7 w-7">
            <ArrowLeft className="h-4 w-4" />
            <span className="sr-only">Volver</span>
          </Button>
        </Link>
        <div className="flex items-center gap-2">
          <h1 className="text-lg font-semibold">{vineyard.name}</h1>
          <Badge variant="outline" className="hidden sm:inline-flex">
            <MapPin className="mr-1 h-3 w-3" />
            {vineyard.location}
          </Badge>
        </div>
      </header>

      <main className="flex flex-1 flex-col gap-6 p-4 md:gap-8 md:p-8">
        {/* Información general del viñedo */}
        <div className="grid gap-6 md:grid-cols-3">
          {/* Imagen y datos básicos */}
          <Card className="md:col-span-1">
            <CardContent className="p-0">
              <Image
                src={vineyard.imageUrl}
                alt={vineyard.name}
                width={400}
                height={300}
                className="w-full h-48 object-cover rounded-t-lg"
              />
              <div className="p-6">
                <h2 className="font-bold text-xl mb-2">{vineyard.name}</h2>
                <div className="space-y-2 text-sm text-muted-foreground">
                  <div className="flex items-center gap-2">
                    <MapPin className="h-4 w-4" />
                    <span>{vineyard.location}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Grape className="h-4 w-4" />
                    <span>{vineyard.grapeVarietals}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Eye className="h-4 w-4" />
                    <span>{vineyard.totalPlots} parcelas • {totalArea.toFixed(1)} ha</span>
                  </div>
                </div>
                {vineyard.iotData.pests && (
                  <Badge variant="destructive" className="mt-4">
                    <AlertTriangle className="mr-1 h-3 w-3" />
                    Alerta de Plagas
                  </Badge>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Métricas predictivas */}
          <div className="md:col-span-2 grid gap-4 sm:grid-cols-2 lg:grid-cols-4">
            <MetricCard
              title="°Brix Predicho"
              value={`${avgBrix.toFixed(1)}°`}
              icon={<Grape className="h-4 w-4 text-muted-foreground" />}
              description="Promedio a 7 días"
            />
            <MetricCard
              title="Humedad Estimada"
              value={`${avgMoisture.toFixed(0)}%`}
              icon={<Droplets className="h-4 w-4 text-muted-foreground" />}
              description="Suelo a 7 días"
            />
            <MetricCard
              title="Listas p/Cosecha"
              value={`${readyToHarvest}/${plots.length}`}
              icon={<Calendar className="h-4 w-4 text-muted-foreground" />}
              description="Parcelas óptimas"
            />
            <MetricCard
              title="Alertas Críticas"
              value={criticalAlerts}
              icon={<AlertTriangle className="h-4 w-4 text-muted-foreground" />}
              description="Requieren acción"
            />
          </div>
        </div>

        {/* Tabla detallada de monitoreo predictivo por parcelas */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Eye className="h-5 w-5" />
              Monitoreo Predictivo por Parcelas
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="w-16">#</TableHead>
                    <TableHead>Humedad</TableHead>
                    <TableHead>Temp</TableHead>
                    <TableHead>pH</TableHead>
                    <TableHead>EC</TableHead>
                    <TableHead>Luz</TableHead>
                    <TableHead>°Brix</TableHead>
                    <TableHead>Tendencias</TableHead>
                    <TableHead>Estado</TableHead>
                    <TableHead>Alertas</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {plots.map((plot) => (
                    <TableRow key={plot.id}>
                      <TableCell className="font-medium">
                        {plot.plotNumber}
                      </TableCell>
                      <TableCell>
                        <div className="space-y-1">
                          <div className="font-semibold">{plot.currentSensorData.soil_moisture.toFixed(0)}%</div>
                          <div className="text-xs text-muted-foreground">Actual</div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="space-y-1">
                          <div className="font-semibold">{plot.currentSensorData.temperature.toFixed(0)}°C</div>
                          <div className="text-xs text-muted-foreground">Actual</div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="space-y-1">
                          <div className="font-semibold">{plot.currentSensorData.soil_ph.toFixed(1)}</div>
                          <div className="text-xs text-muted-foreground">pH</div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="space-y-1">
                          <div className="font-semibold">{plot.currentSensorData.electrical_conductivity.toFixed(1)}</div>
                          <div className="text-xs text-muted-foreground">mS/cm</div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="space-y-1">
                          <div className="font-semibold">{plot.currentSensorData.light_intensity.toFixed(0)}</div>
                          <div className="text-xs text-muted-foreground">lux</div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="space-y-1">
                          <div className="font-semibold">{plot.currentSensorData.brix_current.toFixed(1)}° / {plot.prediction.brix_next_7d.toFixed(1)}°</div>
                          <div className="text-xs text-muted-foreground">
                            Actual / Predicho 7d
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="space-y-1">
                          <TrendIndicator trend={plot.trends.brix_trend} value="Brix" />
                          <TrendIndicator trend={plot.trends.moisture_trend} value="Agua" />
                          {(plot.trends.ph_trend !== 'stable_good' || plot.trends.temp_trend !== 'stable_good') && (
                            <div className="space-y-1">
                              {plot.trends.ph_trend !== 'stable_good' && (
                                <TrendIndicator trend={plot.trends.ph_trend} value="pH" />
                              )}
                              {plot.trends.temp_trend !== 'stable_good' && (
                                <TrendIndicator trend={plot.trends.temp_trend} value="Temp" />
                              )}
                            </div>
                          )}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="space-y-1">
                          <Badge 
                            variant={
                              plot.prediction.harvest_recommendation === 'optimal' ? 'default' :
                              plot.prediction.harvest_recommendation === 'harvest_soon' ? 'secondary' : 'outline'
                            }
                            className="text-xs"
                          >
                            {plot.prediction.harvest_recommendation === 'optimal' ? 'Óptimo' :
                             plot.prediction.harvest_recommendation === 'harvest_soon' ? 'Pronto' : 'Esperar'}
                          </Badge>
                          <div className="text-xs text-muted-foreground">
                            Calidad: {plot.prediction.quality_score}/100
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <AlertBadge alert={plot.alerts} />
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          </CardContent>
        </Card>

        {/* Resumen de condiciones ambientales por parcela */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Thermometer className="h-5 w-5" />
              Condiciones Ambientales por Parcela
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {plots.map((plot) => (
                <div key={plot.id} className="border rounded-lg p-4 bg-muted/20">
                  <div className="flex items-center justify-between mb-3">
                    <h4 className="font-semibold">Parcela #{plot.plotNumber}</h4>
                    <div className="text-sm text-muted-foreground">
                      {plot.area_ha.toFixed(1)} ha • {plot.soilType} • {plot.exposure}
                    </div>
                  </div>
                  
                  <div className="grid gap-4 sm:grid-cols-3 lg:grid-cols-6">
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <Thermometer className="h-4 w-4 text-orange-500" />
                        <span className="text-sm font-medium">Temperatura</span>
                      </div>
                      <div className="text-lg font-semibold">
                        {plot.currentSensorData.temperature.toFixed(1)}°C
                      </div>
                      <div className="text-xs text-muted-foreground">
                        {plot.trends.temp_trend !== 'stable_good' && (
                          <TrendIndicator trend={plot.trends.temp_trend} value="Temp" />
                        )}
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <Droplets className="h-4 w-4 text-blue-500" />
                        <span className="text-sm font-medium">Humedad Suelo</span>
                      </div>
                      <div className="text-lg font-semibold">
                        {plot.currentSensorData.soil_moisture.toFixed(0)}%
                      </div>
                      <div className="text-xs">
                        <TrendIndicator trend={plot.trends.moisture_trend} value="↗7d: " />
                        <span className="text-muted-foreground ml-1">
                          {plot.prediction.soil_moisture_next_7d.toFixed(0)}%
                        </span>
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <Grape className="h-4 w-4 text-purple-500" />
                        <span className="text-sm font-medium">°Brix</span>
                      </div>
                      <div className="text-lg font-semibold">
                        {plot.currentSensorData.brix_current.toFixed(1)}°
                      </div>
                      <div className="text-xs">
                        <TrendIndicator trend={plot.trends.brix_trend} value="↗7d: " />
                        <span className="text-muted-foreground ml-1">
                          {plot.prediction.brix_next_7d.toFixed(1)}°
                        </span>
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <Leaf className="h-4 w-4 text-green-500" />
                        <span className="text-sm font-medium">pH Suelo</span>
                      </div>
                      <div className="text-lg font-semibold">
                        {plot.currentSensorData.soil_ph.toFixed(1)}
                      </div>
                      <div className="text-xs text-muted-foreground">
                        {plot.trends.ph_trend !== 'stable_good' && (
                          <TrendIndicator trend={plot.trends.ph_trend} value="pH" />
                        )}
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <Zap className="h-4 w-4 text-yellow-500" />
                        <span className="text-sm font-medium">EC</span>
                      </div>
                      <div className="text-lg font-semibold">
                        {plot.currentSensorData.electrical_conductivity.toFixed(1)}
                      </div>
                      <div className="text-xs text-muted-foreground">
                        mS/cm
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <Sun className="h-4 w-4 text-yellow-600" />
                        <span className="text-sm font-medium">Luz</span>
                      </div>
                      <div className="text-lg font-semibold">
                        {plot.currentSensorData.light_intensity.toFixed(0)}
                      </div>
                      <div className="text-xs text-muted-foreground">
                        lux
                      </div>
                    </div>
                  </div>
                  
                  {/* Información adicional de la parcela */}
                  <div className="mt-4 pt-3 border-t border-muted">
                    <div className="grid gap-2 sm:grid-cols-3 text-sm">
                      <div>
                        <span className="text-muted-foreground">Plantación:</span>
                        <span className="ml-1 font-medium">{plot.plantingYear} ({plot.vineAge} años)</span>
                      </div>
                      <div>
                        <span className="text-muted-foreground">Pendiente:</span>
                        <span className="ml-1 font-medium">{plot.slope}°</span>
                      </div>
                      <div>
                        <span className="text-muted-foreground">M. Orgánica:</span>
                        <span className="ml-1 font-medium">{plot.iotData.organic_matter.toFixed(1)}%</span>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </main>
    </div>
  );
}

# === Nombre : accordion.tsx
# === Ruta   : src\components\ui\accordion.tsx
# ==============================================

"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


# === Nombre : alert-dialog.tsx
# === Ruta   : src\components\ui\alert-dialog.tsx
# ==============================================

"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


# === Nombre : alert.tsx
# === Ruta   : src\components\ui\alert.tsx
# ==============================================

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


# === Nombre : avatar.tsx
# === Ruta   : src\components\ui\avatar.tsx
# ==============================================

"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


# === Nombre : badge.tsx
# === Ruta   : src\components\ui\badge.tsx
# ==============================================

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


# === Nombre : button.tsx
# === Ruta   : src\components\ui\button.tsx
# ==============================================

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


# === Nombre : calendar.tsx
# === Ruta   : src\components\ui\calendar.tsx
# ==============================================

"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }


# === Nombre : card.tsx
# === Ruta   : src\components\ui\card.tsx
# ==============================================

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


# === Nombre : carousel.tsx
# === Ruta   : src\components\ui\carousel.tsx
# ==============================================

"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}


# === Nombre : chart.tsx
# === Ruta   : src\components\ui\chart.tsx
# ==============================================

"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}


# === Nombre : checkbox.tsx
# === Ruta   : src\components\ui\checkbox.tsx
# ==============================================

"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }


# === Nombre : collapsible.tsx
# === Ruta   : src\components\ui\collapsible.tsx
# ==============================================

"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


# === Nombre : dialog.tsx
# === Ruta   : src\components\ui\dialog.tsx
# ==============================================

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


# === Nombre : dropdown-menu.tsx
# === Ruta   : src\components\ui\dropdown-menu.tsx
# ==============================================

"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


# === Nombre : form.tsx
# === Ruta   : src\components\ui\form.tsx
# ==============================================

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


# === Nombre : input.tsx
# === Ruta   : src\components\ui\input.tsx
# ==============================================

import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-transparent px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


# === Nombre : label.tsx
# === Ruta   : src\components\ui\label.tsx
# ==============================================

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


# === Nombre : menubar.tsx
# === Ruta   : src\components\ui\menubar.tsx
# ==============================================

"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu {...props} />
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group {...props} />
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal {...props} />
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return <MenubarPrimitive.RadioGroup {...props} />
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}


# === Nombre : popover.tsx
# === Ruta   : src\components\ui\popover.tsx
# ==============================================

"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }


# === Nombre : progress.tsx
# === Ruta   : src\components\ui\progress.tsx
# ==============================================

"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


# === Nombre : radio-group.tsx
# === Ruta   : src\components\ui\radio-group.tsx
# ==============================================

"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }


# === Nombre : scroll-area.tsx
# === Ruta   : src\components\ui\scroll-area.tsx
# ==============================================

"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


# === Nombre : select.tsx
# === Ruta   : src\components\ui\select.tsx
# ==============================================

"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


# === Nombre : separator.tsx
# === Ruta   : src\components\ui\separator.tsx
# ==============================================

"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


# === Nombre : sheet.tsx
# === Ruta   : src\components\ui\sheet.tsx
# ==============================================

"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


# === Nombre : skeleton.tsx
# === Ruta   : src\components\ui\skeleton.tsx
# ==============================================

import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }


# === Nombre : slider.tsx
# === Ruta   : src\components\ui\slider.tsx
# ==============================================

"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }


# === Nombre : switch.tsx
# === Ruta   : src\components\ui\switch.tsx
# ==============================================

"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


# === Nombre : table.tsx
# === Ruta   : src\components\ui\table.tsx
# ==============================================

import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


# === Nombre : tabs.tsx
# === Ruta   : src\components\ui\tabs.tsx
# ==============================================

"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


# === Nombre : textarea.tsx
# === Ruta   : src\components\ui\textarea.tsx
# ==============================================

import * as React from 'react';

import {cn} from '@/lib/utils';

const Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(
  ({className, ...props}, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[80px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Textarea.displayName = 'Textarea';

export {Textarea};


# === Nombre : toast.tsx
# === Ruta   : src\components\ui\toast.tsx
# ==============================================

"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}


# === Nombre : toaster.tsx
# === Ruta   : src\components\ui\toaster.tsx
# ==============================================

"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}


# === Nombre : tooltip.tsx
# === Ruta   : src\components\ui\tooltip.tsx
# ==============================================

"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


# === Nombre : use-mobile.tsx
# === Ruta   : src\hooks\use-mobile.tsx
# ==============================================

import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}


# === Nombre : use-toast.ts
# === Ruta   : src\hooks\use-toast.ts
# ==============================================

"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }


# === Nombre : data.ts
# === Ruta   : src\lib\data.ts
# ==============================================

// src/lib/data.ts

import type { Vineyard, HarvestPrediction, Plot } from "@/types";

/**
 * Nuevo algoritmo para predicción de humedad del suelo a 7 días
 * Basado en factores vitícolas reales
 */
function soilMoisturePredictor(currentSensorData: any, iotData: any): number {
  const { soil_moisture, temperature, electrical_conductivity } = currentSensorData;
  const { water_stress_index, organic_matter } = iotData;
  
  // Base: humedad actual
  let moisture_7d = soil_moisture;
  
  // Factor estacional (agosto = tendencia a la baja para estrés hídrico controlado)
  const seasonalFactor = -0.5; // Tendencia ligeramente a la baja
  
  // Factor de temperatura (más calor = más evaporación)
  const tempFactor = (temperature - 22) * -0.3; // Por cada grado sobre 22°C, baja 0.3%
  
  // Factor de conductividad (alta EC puede afectar absorción)
  const ecFactor = electrical_conductivity > 1.5 ? -0.2 : 0;
  
  // Factor de materia orgánica (retiene más agua)
  const organicFactor = organic_matter * 0.1;
  
  // Factor de estrés hídrico actual
  const stressFactor = water_stress_index * -1.5;
  
  // Aplicar todos los factores
  moisture_7d += seasonalFactor + tempFactor + ecFactor + organicFactor + stressFactor;
  
  // Agregar variabilidad natural
  moisture_7d += (Math.random() - 0.5) * 3;
  
  // Mantener en rango realista (3-45%)
  return Math.max(3, Math.min(45, moisture_7d));
}

// Función para calcular tendencias vitícolas realistas
function calculateTrends(currentSensorData: any, iotData: any, prediction: any) {
  const { soil_moisture, temperature, soil_ph, brix_current } = currentSensorData;
  const { brix_next_7d, soil_moisture_next_7d } = prediction;
  
  // Calcular tendencias basadas en viticultura real
  const brix_rate = (brix_next_7d - brix_current) / 7; // °Brix por día real
  const moisture_rate = (soil_moisture_next_7d - soil_moisture) / 7; // % humedad por día
  const ph_change = Math.abs(soil_ph - 6.8); // Desviación del pH óptimo 6.8
  const temp_status = temperature;

  return {
    // Tendencia °Brix basada en velocidad de maduración científicamente válida
    brix_trend: 
      brix_rate > 0.8 ? 'up_bad' :      // Muy rápido (sobre-maduración)
      brix_rate >= 0.3 ? 'up_good' :    // Velocidad óptima (0.3-0.8° por día)
      brix_rate > 0 ? 'stable_good' :   // Lento pero progresando
      'down_bad',                       // Perdiendo azúcar (problema)

    // Tendencia humedad basada en estrés hídrico controlado
    moisture_trend:
      moisture_rate < -3 ? 'down_bad' :     // Perdiendo agua muy rápido (estrés excesivo)
      moisture_rate < -1 ? 'down_good' :    // Estrés hídrico controlado (beneficioso)
      moisture_rate <= 1 ? 'stable_good' :  // Estable (bueno)
      'up_bad',                             // Aumentando humedad (malo para calidad)

    // Tendencia pH basada en rangos vitícolas óptimos
    ph_trend:
      ph_change > 0.5 ? (soil_ph > 6.8 ? 'up_bad' : 'down_bad') : 'stable_good',

    // Tendencia temperatura basada en rangos óptimos de maduración
    temp_trend:
      temp_status > 28 ? 'up_bad' :      // Muy caliente (estrés térmico)
      temp_status > 25 ? 'up_good' :     // Calor moderado (bueno para maduración)
      temp_status >= 20 ? 'stable_good' : // Temperatura ideal
      'down_good'                        // Fresco (ralentiza maduración, puede ser bueno)
  };
}

// Función para generar alertas dinámicas basadas en urgencia vitícola real
function generateViticultureAlerts(
  currentSensorData: any, 
  prediction: any, 
  trends: any,
  vineAge: number
): { priority: string; message: string; action_required: string; time_frame: string } {
  const { soil_moisture, temperature, soil_ph, electrical_conductivity } = currentSensorData;
  const { brix_next_7d } = prediction;
  
  // Mes actual (simulado como agosto - época de pre-cosecha)
  const currentMonth = 8; // Agosto
  
  // Alertas críticas basadas en ciencia vitícola
  if (brix_next_7d > 24 && currentMonth >= 8) {
    return {
      priority: 'critical',
      message: 'Sobre-maduración inminente',
      action_required: 'COSECHAR INMEDIATAMENTE',
      time_frame: '24h'
    };
  }
  
  if (soil_moisture < 8) {
    return {
      priority: 'critical', 
      message: 'Estrés hídrico severo',
      action_required: 'RIEGO URGENTE',
      time_frame: '12h'
    };
  }
  
  if (temperature > 30) {
    return {
      priority: 'high',
      message: 'Estrés térmico peligroso', 
      action_required: 'Proteger del calor',
      time_frame: '24h'
    };
  }
  
  if (brix_next_7d >= 23 && currentMonth >= 8) {
    return {
      priority: 'high',
      message: 'Ventana de cosecha próxima',
      action_required: 'Preparar cosecha',
      time_frame: '3-5 días'
    };
  }
  
  if (soil_ph < 6.0 || soil_ph > 7.5) {
    return {
      priority: 'medium',
      message: 'pH fuera de rango óptimo',
      action_required: 'Corregir pH del suelo',
      time_frame: '48h'
    };
  }
  
  if (electrical_conductivity > 2.0) {
    return {
      priority: 'medium',
      message: 'Salinidad elevada',
      action_required: 'Reducir salinidad',
      time_frame: '1 semana'
    };
  }
  
  if (soil_moisture > 35) {
    return {
      priority: 'medium',
      message: 'Exceso de humedad',
      action_required: 'Reducir riego',
      time_frame: '48h'
    };
  }
  
  return {
    priority: 'low',
    message: 'Condiciones normales',
    action_required: 'Monitoreo rutinario',
    time_frame: 'Semanal'
  };
}

// Función para generar datos de una parcela individual
function generatePlotData(
  plotNumber: number, 
  vineyardVarietals: string, 
  vineyardLocation: string,
  totalPlots: number,
  baseIoTData: any
): Plot {
  // Calcular día del año
  const now = new Date();
  const start = new Date(now.getFullYear(), 0, 0);
  const diff = now.getTime() - start.getTime();
  const dayOfYear = Math.floor(diff / (1000 * 60 * 60 * 24));
  
  // Componentes estacionales
  const sin_day = Math.sin(2 * Math.PI * dayOfYear / 365);
  const cos_day = Math.cos(2 * Math.PI * dayOfYear / 365);
  
  // Generar variación por parcela (cada parcela es ligeramente diferente)
  const variation = () => 0.8 + Math.random() * 0.4; // 0.8 a 1.2
  const smallVariation = () => 0.95 + Math.random() * 0.1; // 0.95 a 1.05
  
  // Tipos de suelo variados
  const soilTypes = ['Franco', 'Arcilloso', 'Arenoso', 'Franco-arenoso', 'Franco-arcilloso'];
  const exposures = ['Norte', 'Sur', 'Este', 'Oeste', 'Noreste', 'Noroeste', 'Sureste', 'Suroeste'];
  
  // Año de plantación variado (últimos 5-25 años)
  const plantingYear = 2024 - (5 + Math.floor(Math.random() * 20));
  const vineAge = 2024 - plantingYear;
  
  // IoT data con variaciones por parcela para algoritmos ML
  const plotIoTData = {
    temp_mean_7d: baseIoTData.temp_mean_7d * variation(),
    hr_max_3d: baseIoTData.hr_max_3d * smallVariation(),
    soil_moist_mean_24h: baseIoTData.soil_moist_mean_24h * variation(),
    ndvi_anom: baseIoTData.ndvi_anom + (Math.random() - 0.5) * 0.1,
    evi_anom: baseIoTData.evi_anom + (Math.random() - 0.5) * 0.08,
    sin_day,
    cos_day,
    variedad_onehot: baseIoTData.variedad_onehot,
    // Datos específicos de parcela
    organic_matter: 1.5 + Math.random() * 3.5, // 1.5% - 5.0%
    water_stress_index: Math.random() * 0.7, // 0 - 0.7
  };
  
  // Generar predicciones para esta parcela específica
  const brix_next_7d = brixRandomForest({
    ...plotIoTData,
    soil_ph: Math.max(5.5, Math.min(8.5, 6.0 + Math.random() * 2.0)),
    organic_matter: plotIoTData.organic_matter,
    water_stress_index: plotIoTData.water_stress_index
  });
  
  // Generar °Brix actual realista (ligeramente menor que la predicción de 7 días)
  const brix_current = Math.max(15, brix_next_7d - (0.3 + Math.random() * 2)); // 0.3-2.3° menos que predicción
  
  // Datos actuales de sensores IoT (rangos científicamente válidos)
  const currentSensorData = {
    soil_moisture: Math.max(5, Math.min(40, 15 + Math.random() * 20)), // 5-40% (rango real viticultura)
    temperature: Math.max(15, Math.min(35, 20 + Math.random() * 10)), // 15-35°C (rango real)
    soil_ph: Math.max(5.5, Math.min(8.5, 6.0 + Math.random() * 2.0)), // 5.5-8.5 (rango real)
    electrical_conductivity: Math.max(0.5, Math.min(3.0, 0.8 + Math.random() * 1.5)), // 0.5-3.0 mS/cm
    light_intensity: Math.max(3000, Math.min(7000, 4000 + Math.random() * 2000)), // 3000-7000 lux
    air_humidity: Math.max(40, Math.min(90, 50 + Math.random() * 30)), // 40-90% HR
    brix_current, // °Brix actual medido
  };
  
  // Nueva predicción de humedad del suelo a 7 días usando algoritmo vitícola
  const soil_moisture_next_7d = soilMoisturePredictor(currentSensorData, plotIoTData);
  
  const yield_final = yieldXGBoost({
    ...plotIoTData,
    surface_ha: baseIoTData.surface_ha / totalPlots // Área promedio por parcela
  });
  
  // Fecha estimada de cosecha basada en °Brix
  const daysToHarvest = Math.max(3, Math.round((25 - brix_next_7d) * 4));
  const harvestDate = new Date();
  harvestDate.setDate(harvestDate.getDate() + daysToHarvest);
  
  // Score de calidad basado en múltiples factores vitícolas
  const qualityScore = Math.min(100, Math.max(60, 
    (brix_next_7d * 2.8) + 
    (yield_final / 120) + 
    ((8 - Math.abs(currentSensorData.soil_ph - 6.8)) * 8) +
    ((5 - plotIoTData.organic_matter) * 3) +
    ((1 - plotIoTData.water_stress_index) * 12)
  ));

  // Crear predicciones
  const prediction = {
    brix_next_7d,
    soil_moisture_next_7d,
    yield_final,
    confidence_brix: 0.75 + Math.random() * 0.2,
    confidence_moisture: 0.70 + Math.random() * 0.25,
    confidence_yield: 0.70 + Math.random() * 0.25,
    harvest_recommendation: (brix_next_7d >= 24 ? 'optimal' : brix_next_7d >= 22 ? 'harvest_soon' : 'wait') as 'optimal' | 'harvest_soon' | 'wait',
    expected_harvest_date: harvestDate.toISOString().split('T')[0],
    quality_score: Math.round(qualityScore)
  };

  // Calcular tendencias
  const trends = calculateTrends(currentSensorData, plotIoTData, prediction);
  
  // Generar alertas
  const alerts = generateViticultureAlerts(currentSensorData, prediction, trends, vineAge);

  return {
    id: `plot-${plotNumber}`,
    plotNumber,
    area_ha: parseFloat(((baseIoTData.surface_ha / totalPlots) * (0.8 + Math.random() * 0.4)).toFixed(2)),
    soilType: soilTypes[Math.floor(Math.random() * soilTypes.length)],
    slope: Math.round(Math.random() * 25), // 0-25 grados
    exposure: exposures[Math.floor(Math.random() * exposures.length)],
    plantingYear,
    vineAge,
    currentSensorData,
    iotData: plotIoTData,
    prediction,
    trends,
    alerts
  };
}

// Función para generar datos simulados realistas del viñedo
function generateIoTData(varietals: string, location: string) {
  // Calcular día del año
  const now = new Date();
  const start = new Date(now.getFullYear(), 0, 0);
  const diff = now.getTime() - start.getTime();
  const dayOfYear = Math.floor(diff / (1000 * 60 * 60 * 24));
  
  // Componentes estacionales
  const sin_day = Math.sin(2 * Math.PI * dayOfYear / 365);
  const cos_day = Math.cos(2 * Math.PI * dayOfYear / 365);
  
  // Simulación de one-hot encoding para variedades principales
  const varietyMap: { [key: string]: number[] } = {
    'Cabernet Sauvignon': [1, 0, 0, 0, 0],
    'Merlot': [0, 1, 0, 0, 0],
    'Chardonnay': [0, 0, 1, 0, 0],
    'Pinot Noir': [0, 0, 0, 1, 0],
    'Sauvignon Blanc': [0, 0, 0, 0, 1]
  };
  
  // Determinar variedad principal
  const mainVariety = Object.keys(varietyMap).find(v => varietals.includes(v)) || 'Cabernet Sauvignon';
  
  return {
    pests: Math.random() < 0.2,
    temp_mean_7d: 18 + Math.random() * 12, // 18-30°C
    hr_max_3d: 60 + Math.random() * 35, // 60-95%
    soil_moist_mean_24h: 25 + Math.random() * 50, // 25-75%
    ndvi_anom: -0.2 + Math.random() * 0.4, // -0.2 a 0.2
    evi_anom: -0.15 + Math.random() * 0.3, // -0.15 a 0.15
    sin_day,
    cos_day,
    variedad_onehot: varietyMap[mainVariety],
    surface_ha: 5 + Math.random() * 20 // 5-25 hectáreas
  };
}

// Función para generar viñedo completo con parcelas
function generateVineyardWithPlots(
  id: string,
  name: string, 
  location: string, 
  grapeVarietals: string, 
  totalPlots: number,
  imageUrl: string,
  imageHint: string
): Vineyard {
  const baseIoTData = generateIoTData(grapeVarietals, location);
  
  // Generar todas las parcelas
  const plots: Plot[] = [];
  for (let i = 1; i <= totalPlots; i++) {
    plots.push(generatePlotData(i, grapeVarietals, location, totalPlots, baseIoTData));
  }
  
  return {
    id,
    name,
    location,
    grapeVarietals,
    totalPlots,
    plots,
    iotData: baseIoTData,
    imageUrl,
    imageHint
  };
}

/**
 * Simulación del modelo Random Forest para predicción de °Brix
 * Input: datos IoT del viñedo o parcela
 * Output: °Brix previsto a 7 días
 */
function brixRandomForest(iotData: any): number {
  const {
    temp_mean_7d,
    hr_max_3d,
    soil_moist_mean_24h,
    ndvi_anom,
    evi_anom,
    sin_day,
    cos_day,
    variedad_onehot,
    soil_ph,
    organic_matter,
    water_stress_index
  } = iotData;

  // Simulación de Random Forest (pesos basados en importancia real de features)
  let brixPrediction = 18; // Base °Brix
  
  // Contribución de temperatura (feature más importante)
  brixPrediction += (temp_mean_7d - 20) * 0.4;
  
  // Contribución de humedad relativa
  brixPrediction -= (hr_max_3d - 75) * 0.02;
  
  // Contribución de humedad del suelo
  brixPrediction += (50 - soil_moist_mean_24h) * 0.05;
  
  // Contribución de índices de vegetación
  brixPrediction += ndvi_anom * 8 + evi_anom * 6;
  
  // Contribución estacional
  brixPrediction += sin_day * 2 + cos_day * 1.5;
  
  // Contribución de variedad (algunas variedades acumulan más azúcar)
  const varietyContrib = variedad_onehot[0] * 1.2 + // Cabernet Sauvignon
                        variedad_onehot[1] * 0.8 +  // Merlot
                        variedad_onehot[2] * 0.5 +  // Chardonnay
                        variedad_onehot[3] * 0.7 +  // Pinot Noir
                        variedad_onehot[4] * 0.9;   // Sauvignon Blanc
  
  brixPrediction += varietyContrib;
  
  // Contribuciones específicas de parcela (si están disponibles)
  if (soil_ph) {
    brixPrediction += (soil_ph - 6.5) * 0.5; // pH óptimo alrededor de 6.5
  }
  if (organic_matter) {
    brixPrediction += organic_matter * 0.3; // Más materia orgánica = mejor nutrición
  }
  if (water_stress_index !== undefined) {
    brixPrediction += water_stress_index * 2; // Estrés hídrico moderado mejora °Brix
  }
  
  // Agregar algo de ruido para simular incertidumbre
  brixPrediction += (Math.random() - 0.5) * 2;
  
  // Mantener en rango realista (15-28 °Brix)
  return Math.max(15, Math.min(28, parseFloat(brixPrediction.toFixed(1))));
}

/**
 * Simulación del modelo XGBoost para predicción de rendimiento
 * Input: datos IoT del viñedo o parcela + superficie
 * Output: rendimiento final kg/ha
 */
function yieldXGBoost(iotData: any): number {
  const {
    temp_mean_7d,
    hr_max_3d,
    soil_moist_mean_24h,
    ndvi_anom,
    evi_anom,
    sin_day,
    cos_day,
    variedad_onehot,
    surface_ha,
    soil_ph,
    organic_matter,
    water_stress_index
  } = iotData;

  // Simulación de XGBoost (gradient boosting)
  let yieldPrediction = 8000; // Base yield kg/ha
  
  // Contribución de temperatura (óptimo alrededor de 22-25°C)
  const tempOptimal = 23.5;
  yieldPrediction -= Math.abs(temp_mean_7d - tempOptimal) * 150;
  
  // Contribución de humedad relativa (muy importante para rendimiento)
  yieldPrediction += (hr_max_3d - 70) * 25;
  
  // Contribución de humedad del suelo (crítico)
  yieldPrediction += (soil_moist_mean_24h - 40) * 60;
  
  // Contribución de índices de vegetación (muy correlacionados con yield)
  yieldPrediction += ndvi_anom * 3000 + evi_anom * 2500;
  
  // Contribución estacional
  yieldPrediction += sin_day * 500 + cos_day * 300;
  
  // Contribución de variedad (diferentes potenciales de rendimiento)
  const varietyYield = variedad_onehot[0] * 1000 + // Cabernet Sauvignon
                      variedad_onehot[1] * 1200 +  // Merlot (más productivo)
                      variedad_onehot[2] * 1100 +  // Chardonnay
                      variedad_onehot[3] * 900 +   // Pinot Noir (menos productivo)
                      variedad_onehot[4] * 1050;   // Sauvignon Blanc
  
  yieldPrediction += varietyYield;
  
  // Efecto de escala (parcelas más grandes pueden tener ligeras eficiencias)
  if (surface_ha) {
    yieldPrediction += Math.log(Math.max(0.1, surface_ha)) * 100;
  }
  
  // Contribuciones específicas de parcela
  if (soil_ph) {
    yieldPrediction -= Math.abs(soil_ph - 6.8) * 200; // pH óptimo para rendimiento
  }
  if (organic_matter) {
    yieldPrediction += organic_matter * 400; // Materia orgánica mejora rendimiento
  }
  if (water_stress_index !== undefined) {
    yieldPrediction -= water_stress_index * 2000; // Estrés hídrico reduce rendimiento
  }
  
  // Agregar ruido para simular incertidumbre
  yieldPrediction += (Math.random() - 0.5) * 1000;
  
  // Mantener en rango realista (4000-15000 kg/ha)
  return Math.max(4000, Math.min(15000, Math.round(yieldPrediction)));
}

export const initialVineyards: Vineyard[] = [
  generateVineyardWithPlots(
    "1", 
    "Finca Roble Alto", 
    "Valle de Napa, California", 
    "Cabernet Sauvignon, Merlot", 
    12, 
    "/imgs/1.jpg", 
    "vineyard aerial"
  ),
  generateVineyardWithPlots(
    "2", 
    "Viñedos Arroyo Sauce", 
    "Borgoña, Francia", 
    "Chardonnay, Pinot Noir", 
    8, 
    "/imgs/2.png", 
    "grapes vine"
  ),
  generateVineyardWithPlots(
    "3", 
    "Hacienda del Valle del Sol", 
    "Toscana, Italia", 
    "Zinfandel, Syrah", 
    15, 
    "/imgs/3.jpeg", 
    "vineyard sunset"
  ),
  generateVineyardWithPlots(
    "4", 
    "Vides de la Montaña Nublada", 
    "Sonoma, California", 
    "Sauvignon Blanc", 
    10, 
    "/imgs/4.png", 
    "vineyard mountain"
  ),
];

// Mantenemos un estado en memoria para simular una base de datos.
let vineyardsDB = [...initialVineyards];

export function getVineyards() {
  // En una aplicación real, esto consultaría una base de datos.
  return vineyardsDB;
}

export function getVineyardById(id: string) {
    return vineyardsDB.find(v => v.id === id);
}

export function addVineyard(vineyardData: Omit<Vineyard, 'id' | 'iotData' | 'plots'>) {
  const newVineyard = generateVineyardWithPlots(
    (vineyardsDB.length + 1).toString(),
    vineyardData.name,
    vineyardData.location,
    vineyardData.grapeVarietals,
    vineyardData.totalPlots,
    vineyardData.imageUrl,
    vineyardData.imageHint
  );
  vineyardsDB.push(newVineyard);
  return newVineyard;
}

/**
 * Obtener datos específicos de una parcela
 */
export function getPlotById(vineyardId: string, plotNumber: number): Plot | null {
  const vineyard = getVineyardById(vineyardId);
  if (!vineyard) return null;
  
  return vineyard.plots.find(plot => plot.plotNumber === plotNumber) || null;
}

/**
 * Obtener todas las parcelas de un viñedo
 */
export function getPlotsByVineyardId(vineyardId: string): Plot[] {
  const vineyard = getVineyardById(vineyardId);
  if (!vineyard) return [];
  
  return vineyard.plots;
}

/**
 * Función principal para obtener predicciones de cosecha
 */
export function getHarvestPrediction(vineyardId: string): HarvestPrediction | null {
  const vineyard = getVineyardById(vineyardId);
  if (!vineyard) return null;

  const brix_next_7d = brixRandomForest(vineyard.iotData);
  const yield_final = yieldXGBoost(vineyard.iotData);
  
  // Calcular confianza basada en calidad de datos simulada
  const confidence_brix = 0.75 + Math.random() * 0.2; // 75-95%
  const confidence_yield = 0.70 + Math.random() * 0.25; // 70-95%
  
  // Determinar recomendación de cosecha
  let harvest_recommendation: 'optimal' | 'wait' | 'harvest_soon' = 'wait';
  if (brix_next_7d >= 24) {
    harvest_recommendation = 'optimal';
  } else if (brix_next_7d >= 22) {
    harvest_recommendation = 'harvest_soon';
  }
  
  return {
    brix_next_7d,
    yield_final,
    confidence_brix: parseFloat(confidence_brix.toFixed(2)),
    confidence_yield: parseFloat(confidence_yield.toFixed(2)),
    harvest_recommendation
  };
}

/**
 * Obtener predicciones para todos los viñedos
 */
export function getAllHarvestPredictions(): { [key: string]: HarvestPrediction } {
  const predictions: { [key: string]: HarvestPrediction } = {};
  
  vineyardsDB.forEach(vineyard => {
    const prediction = getHarvestPrediction(vineyard.id);
    if (prediction) {
      predictions[vineyard.id] = prediction;
    }
  });
  
  return predictions;
}

// Función para la IA (actualizada)
export function getVineyardData(vineyardName?: string) {
  if (vineyardName) {
    const vineyard = vineyardsDB.find(v => v.name.toLowerCase().includes(vineyardName.toLowerCase()));
    if (!vineyard) return { error: "Viñedo no encontrado" };
    
    const prediction = getHarvestPrediction(vineyard.id);
    return {
      ...vineyard,
      prediccion_cosecha: prediction
    };
  }
  
  // Resumen con predicciones
  const allPredictions = getAllHarvestPredictions();
  return vineyardsDB.map(v => ({
    nombre: v.name,
    ubicacion: v.location,
    alerta_plagas: v.iotData.pests,
    prediccion_brix: allPredictions[v.id]?.brix_next_7d,
    prediccion_rendimiento: allPredictions[v.id]?.yield_final,
    recomendacion: allPredictions[v.id]?.harvest_recommendation
  }));
}

# === Nombre : utils.ts
# === Ruta   : src\lib\utils.ts
# ==============================================

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


# === Nombre : index.ts
# === Ruta   : src\types\index.ts
# ==============================================

// src/types/index.ts

export type Plot = {
  id: string;
  plotNumber: number;
  area_ha: number; // Área de la parcela en hectáreas
  soilType: string; // Tipo de suelo
  slope: number; // Pendiente en grados
  exposure: string; // Exposición al sol (Norte, Sur, etc.)
  plantingYear: number; // Año de plantación
  vineAge: number; // Edad de las vides en años
  // Datos actuales de sensores IoT (simulados pero realistas)
  currentSensorData: {
    soil_moisture: number; // Humedad del suelo actual (%)
    temperature: number; // Temperatura actual (°C)
    soil_ph: number; // pH del suelo
    electrical_conductivity: number; // EC en mS/cm
    light_intensity: number; // Luz en lux
    air_humidity: number; // Humedad relativa del aire (%)
    brix_current: number; // °Brix actual (medición real)
  };
  // Métricas específicas de la parcela para ML
  iotData: {
    temp_mean_7d: number;
    hr_max_3d: number;
    soil_moist_mean_24h: number;
    ndvi_anom: number;
    evi_anom: number;
    sin_day: number;
    cos_day: number;
    variedad_onehot: number[];
    // Métricas adicionales específicas de parcela
    organic_matter: number; // % materia orgánica
    water_stress_index: number; // Índice de estrés hídrico
  };
  prediction: {
    brix_next_7d: number;
    soil_moisture_next_7d: number; // Nueva predicción de humedad del suelo
    yield_final: number;
    confidence_brix: number;
    confidence_moisture: number; // Nueva confianza para humedad
    confidence_yield: number;
    harvest_recommendation: 'optimal' | 'wait' | 'harvest_soon';
    expected_harvest_date: string; // Fecha estimada de cosecha
    quality_score: number; // Score de calidad esperada (1-100)
  };
  // Nuevas tendencias específicas
  trends: {
    brix_trend: 'up_good' | 'up_bad' | 'down_bad' | 'stable_good' | 'stable_bad';
    moisture_trend: 'down_good' | 'down_bad' | 'up_bad' | 'stable_good' | 'stable_bad';
    ph_trend: 'up_bad' | 'down_bad' | 'stable_good';
    temp_trend: 'up_bad' | 'up_good' | 'stable_good' | 'down_good';
  };
  // Alertas dinámicas basadas en urgencia vitícola
  alerts: {
    priority: 'critical' | 'high' | 'medium' | 'low' | 'none';
    message: string;
    action_required: string;
    time_frame: string; // "24h", "48h", "1 semana", etc.
  };
};

export type Vineyard = {
  id: string;
  name: string;
  location: string;
  grapeVarietals: string;
  totalPlots: number;
  plots: Plot[]; // Array de parcelas individuales
  iotData: {
    pests: boolean;
    // Datos agregados del viñedo (promedio de todas las parcelas)
    temp_mean_7d: number; // Temperatura media últimos 7 días (°C)
    hr_max_3d: number; // Humedad relativa máxima últimos 3 días (%)
    soil_moist_mean_24h: number; // Humedad del suelo media últimas 24h (%)
    ndvi_anom: number; // Anomalía NDVI
    evi_anom: number; // Anomalía EVI
    sin_day: number; // Componente sinusoidal del día del año
    cos_day: number; // Componente cosinusoidal del día del año
    variedad_onehot: number[]; // One-hot encoding de variedades
    surface_ha: number; // Superficie total en hectáreas
  };
  imageUrl: string;
  imageHint: string;
};

export type Message = {
  id: string;
  role: 'user' | 'assistant' | 'tool';
  content: string;
};

export type HarvestPrediction = {
  brix_next_7d: number; // °Brix previsto a 7 días
  yield_final: number; // Rendimiento final kg/ha
  confidence_brix: number; // Confianza del modelo (0-1)
  confidence_yield: number; // Confianza del modelo (0-1)
  harvest_recommendation: 'optimal' | 'wait' | 'harvest_soon';
};